name: Version Management

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Get latest version
        id: get_version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version_bump
        run: |
          # Get commit messages since last tag
          COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~1")..HEAD --pretty=format:"%s")
          
          # Check for breaking changes
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          # Check for features
          elif echo "$COMMITS" | grep -q "feat:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          # Default to patch
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          BUMP="${{ steps.version_bump.outputs.bump }}"
          
          # Remove 'v' prefix and split version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment version based on bump type
          case $BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          generate_release_notes: true
          files: |
            README.md
            versions.tf
            variables.tf
            outputs.tf
            *.tf

      - name: Update version in versions.tf
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/version = \".*\"/version = \"${NEW_VERSION#v}\"/" versions.tf
          git add versions.tf
          git commit -m "chore: bump version to ${NEW_VERSION}"
          git push

      - name: Create Pull Request for version update
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          title: "chore: bump version to ${{ steps.new_version.outputs.new_version }}"
          body: |
            Automated version bump to ${{ steps.new_version.outputs.new_version }}
            
            This PR was created automatically by the version management workflow.
            
            Changes:
            - Updated version in versions.tf
            - Created new release tag
          branch: version-bump
          base: main 